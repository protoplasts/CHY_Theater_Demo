@using FUEN104_2_FinalProject.Models.ViewModels
@using System.Web
@model SeatViewModel
@functions {
    string GetLevelImagePath(int level)
    {
        if (level >= 1 && level <= 5)
        {
            return $"/img/Class/index_icon_0{level}.jpg";
        }
        return "~/img/Class/index_icon_default.png";
    }
}

@section Styles {
    <style>
            body {
                font-family: 'Roboto', sans-serif;
                background-color: #f5f5f5;
                color: #333;
                display: flex;
                flex-direction: column;
                min-height: 100vh;
            }

            .seat-selection-container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: #fff;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                border-radius: 8px;
                margin-top: 85px !important;
                margin-bottom: 10px !important;
            }

            .movie-details {
                display: flex;
                gap: 40px;
                background-color: #f9f9f9;
                border-radius: 12px;
                padding: 30px;
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
                margin-top: 30px;
            }

            .movie-poster {
                flex: 0 0 300px;
            }

            .movie-poster img {
                width: 100%;
                height: auto;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                transition: transform 0.3s ease;
            }


            .movie-info {
                flex: 1;
            }

            .movie-info h3 {
                font-size: 28px;
                color: #333;
                margin-bottom: 20px;
                border-bottom: 2px solid #e0e0e0;
                padding-bottom: 10px;
            }

            .movie-info p {
                margin-bottom: 15px;
                font-size: 16px;
                line-height: 1.6;
            }

            .movie-info strong {
                color: #555;
                font-weight: 600;
            }

            .movie-info ul {
                list-style-type: none;
                padding-left: 0;
            }

            .movie-info li {
                margin-bottom: 10px;
                padding: 8px;
                background-color: ivory;
                border-radius: 6px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            #timeLeft {
                font-weight: bold;
                color: #e53935;
            }

            #selectedSeatInfo {
                font-weight: bold;
                color: #4caf50;
            }

        .seat-map {
            display: grid;
            grid-gap: 10px;
            justify-content: center;
            margin-top: 30px;
        }

        .seat-row {
            display: flex;
            gap: 8px;
            align-items:center
        }

        .seat, .seat-placeholder {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 30px;
            height: 30px;
            border-radius: 5px;
        }
        .seat {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 30px;
            height: 30px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }

            .seat.available {
                background-color: #8bc34a;
            }

            .seat.booked {
                background-color: #e53935;
                opacity: 0.5;
                cursor: not-allowed;
            }

            .seat.chosen {
                background-color: lightgray;
            }

            .seat:hover:not(.booked) {
                transform: scale(1.1);
                background-color: #20c997;
            }
            /* row lable */
            .row-label {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 30px;
                height: 30px;
                font-weight: bold;
            }

            .row-label.left {
                margin-right: 8px;
            }

            .row-label.right {
                margin-left: 8px;
            }

            .row-label.aisle {
                margin: 0 20px;
            }
        .screen {
            width: 80%;
            height: 60px;
            background-color: #e0e0e0;
            border: 2px solid #bdbdbd;
            margin: 0 auto 30px;
            text-align: center;
            line-height: 60px;
            font-weight: bold;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .legend {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }       

            .legend .seat {
                width: 25px;
                height: 25px;
                margin-right: 15px;
            }

        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }

            .legend-item .seat {
                width: 20px;
                height: 20px;
                margin-right: 5px;
            }

        .legend-text {
            font-size: 14px;
        }
        .animateBtn {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }

        #quantityButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        main[role="main"] {
            flex: 1 0 auto;
            padding-bottom: 100px;
        }

        footer {
            flex-shrink: 0;
        }

        .row.bg-light {
            transition: background-color 0.3s ease;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
        }

            .row.bg-light:hover {
                background-color: #ffcccb;
            }

        .goBackBtn {
            background-color: red;
            border-color: green;
            color: white;
            transition: all 0.3s ease;
            animation: pulse 2s infinite;
        }

        .movie-chooseseat {
            background-image: url('/img/test3.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: repeat;
            position: relative;
        }

        .movie-chooseseat::before {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                background-color: rgba(0, 0, 0, 0.5); /* Adjust the last value (0.5) for opacity */
                z-index: 0;
            }

        .movie-chooseseat > * {
                position: relative;
                z-index: 1;
            }

        @@media (max-width: 1220px) {
            .seat-map {
                overflow-x: auto;
            }

            .seat-map-container {
                overflow-x: auto;
                width: 100%;
                padding-bottom: 15px; /* Add some padding to ensure the scrollbar doesn't cover content */
            }

            .seat-map {
                display: inline-block; /* Change from grid to inline-block */
                white-space: nowrap; /* Prevent wrapping of seat rows */
                min-width: max-content; /* Ensure the container is at least as wide as its content */
            }

            .seat-row {
                margin: 10px;
                white-space: nowrap; /* Prevent wrapping within the row */
            }

            .seat-selection-container {
                max-width: 100%;
                padding: 15px;
            }
        }

        @@media (max-width: 992px) {
            .movie-details {
                grid-template-columns: 1fr;
            }

            .movie-poster {
                margin-bottom: 20px;
                max-width: 200px;
            }

                .movie-poster img {
                    max-width: 250px;
                }

            .movie-info h3 {
                font-size: 24px;
            }

            .seat-map {
                overflow-x: auto;
            }

            .seat-selection-container {
                padding: 10px;
            }
        }

        @@media (max-width: 768px) {
            .seat-map {
                overflow-x: auto;
            }

            .seat, .seat-placeholder {
                width: 25px;
                height: 25px;
                font-size: 12px;
            }

            .row-label {
                width: 25px;
                height: 25px;
                font-size: 12px;
            }

            .screen {
                width: 90%;
                height: 40px;
                line-height: 40px;
                font-size: 14px;
            }

            .legend-item {
                margin-right: 10px;
            }

            .legend-text {
                font-size: 12px;
            }

            .movie-details {
                padding: 20px;
            }

            .movie-info p {
                font-size: 14px;
            }
        }

        @@media (max-width: 576px) {
            .seat-selection-container {
                padding: 10px;
            }

            .movie-poster {
                display: none
            }

            .movie-details {
                padding: 15px;
            }

            .movie-poster img {
                max-width: 200px;
            }

            .movie-info h3 {
                font-size: 20px;
            }

            .movie-info li {
                font-size: 13px;
            }

            .seat, .seat-placeholder {
                width: 20px;
                height: 20px;
                font-size: 10px;
            }

            .row-label {
                width: 20px;
                height: 20px;
                font-size: 10px;
            }

            .row.my-4 {
                flex-direction: column;
            }

            .col-6 {
                width: 100%;
                margin-bottom: 10px;
            }

            #quantityButton {
                font-size: 14px;
            }

            .goBackBtn {
                font-size: 12px;
                padding: 6px 10px;
            }
        }
    </style>
}

<section class="movie-chooseseat">
	<div class="seat-selection-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <button onclick="goBackToIndex()" class="btn goBackBtn fs-5">
                <i class="fas fa-arrow-left me-2"></i>返回選擇影城
            </button>
        </div>

        <div class="movie-details"> 
            <div class="movie-poster">
                <img src="@Model.MovieImag" alt="Movie Poster">
            </div>
                <div class=" col-md-8">
                    <div class="movie-info">
                    <h3>@Model.MovieName (@Model.MovieEnglishName)</h3>
                    <p>
                        <strong class="fw-bold fs-4 text-dark">級別:</strong>
                        <img src="@GetLevelImagePath(Model.Level)" alt="Level @Model.Level" class="" style="height:50px" />
                    </p>
                    <p><strong>開演時間 :</strong> @Model.ShowDateTime.ToString("yyyy/MM/dd HH:mm") <span id="timeLeft"></span></p>
                    <p><strong>地點:</strong> @Model.AuditoriumName-@Model.Auditoriumtype</p>
                    <p><strong>票種:</strong></p>
                    <ul>
                        @foreach (var ticketType in Model.TicketTypes)
                        {
                            <li>@ticketType.TypeName - @ticketType.Quantity 張 </li>
                        }
                    </ul>
                    <p><strong>明細:</strong> </p>
                    <ul>
                        <li>@Model.GetCombinedTicketDescription()</li>
                    </ul>
                    <p><strong>加購品項:</strong> </p>

                    <ul>
                        @foreach (var ticketType in Model.SelectedSnacks)
                        {
                           <li>@ticketType.SnackName x @ticketType.Quantity</li>
                        }
                    </ul>
                    <p><strong>座位:</strong> <span id="selectedSeatInfo"></span></p>
                    <p><strong>總計:</strong> @Model.BookingSelection.TotalPrice</p>
                </div>
             </div>
     </div>

    <div class="row my-4">
        <div class="col-6 text-center d-flex align-items-center justify-content-center">
            <h3 class="mb-0 text-primary">選取座位</h3>
        </div>
        <div class="col-6 d-flex justify-content-center align-items-center py-3">
            <button class="btn btn-warning btn-lg animateBtn" id="quantityButton" disabled>
                Still need to choose @Model.TotalSeats seat(s)
            </button>
        </div>
    </div>

    <div class="screen">銀幕</div>
        <div class="seat-map-container">

        <div id="seatMap" class="seat-map">
            @foreach (var row in Model.SeatList.GroupBy(s => s.SeatRow).OrderBy(g => g.Key))
            {
                <div class="seat-row">
                    <div class="row-label left">@row.Key</div>
                    @foreach (var seat in row.OrderBy(s => s.SeatNumber))
                    {
                        @if (seat.SeatStatus != "NotInUse")
                        {
                            var showSeatStatus = seat.ShowSeatStatus == "Available" ? "available" : "booked";
                            var isAisle = seat.SeatNumber == 7 || seat.SeatNumber == 8 || seat.SeatNumber == 18 || seat.SeatNumber == 19;
                            <div class="seat @showSeatStatus @(isAisle ? "aisle" : "")"
                                 data-seat-id="@seat.SeatID"
                                 onclick="changeSeat('@seat.SeatID', '@seat.SeatNumber', '@showSeatStatus', '@seat.SeatRow')">
                                @seat.SeatNumber
                            </div>
                        }
                        else
                        {
                            <div class="seat-placeholder"></div>
                        }

                            if ((seat.SeatNumber == 7 && row.Any(s => s.SeatNumber > 7)) || (seat.SeatNumber == 18 && row.Any(s => s.SeatNumber > 18)))
                            {
                                <div class="row-label aisle">@row.Key</div>
                            }
                    }
                    <div class="row-label right">@row.Key</div>
                </div>
            }
        </div>
        </div>

    <div class="legend mt-3">
        <div class="legend-item">
            <span class="seat available"></span>
            <span class="legend-text">可選取</span>
        </div>
        <div class="legend-item">
            <span class="seat booked"></span>
            <span class="legend-text">無法選取</span>
        </div>
        <div class="legend-item">
            <span class="seat chosen"></span>
            <span class="legend-text">已選取</span>
        </div>
    </div>


</div>
</section>

<div id="notificationDialog" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content rounded-4 shadow">
            <div class="modal-body p-4 text-center">
                <h5 class="mb-2">提示</h5>
                <hr style="border-top: 1px solid red;" />
                <p class="mb-0" id="notificationMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let selectedSeats = [];
    let requiredSeats = @Model.TotalSeats;
    let confirmButton = document.getElementById('confirmButton');
    let quantityButton = document.querySelector('.animateBtn');

    function enableConfirmButton() {
        quantityButton.disabled = selectedSeats.length !== requiredSeats;
    }
    function changeSeat(seatID, seatNumber, seatStatus, seatRow) {
        if (seatStatus === 'booked') {
            showNotification('這個座位已經被預訂了。請您選擇其他可用座位.');
            return;
        }
        const seat = document.querySelector(`.seat[data-seat-id="${seatID}"]`);

        //在selectedSeats暫存array找現在選擇的SeatID之index
        const seatIndex = selectedSeats.findIndex(seat => seat.SeatID === seatID);
        
        //如果這個座位被選過seatIndex就不會為-1
        if (seatIndex !== -1) {
            selectedSeats.splice(seatIndex, 1);
            seat.classList.remove('chosen');
            showNotification(`您已取消選擇座位。您已選擇 ${selectedSeats.length} 個座位，還需再選擇 ${requiredSeats - selectedSeats.length} 個座位。`);
        } 
        else if (selectedSeats.length < requiredSeats) {
            selectedSeats.push({ SeatID: seatID, seatRow: seatRow, seatNumber: seatNumber });
            seat.classList.add('chosen');
            if (selectedSeats.length === requiredSeats) {showNotification(`您已經選取完所需的座位數`);
            } 
            else {
                showNotification(`您已選擇 ${selectedSeats.length} 個座位。您需要再選擇 ${requiredSeats - selectedSeats.length} 個席位。`);
            }
        } 
        else {
            showNotification('請先取消選取已選取座位。');
            return;
        }
        enableConfirmButton();
        updateSelectedSeatInfo();
        updateQuantityButtonText();
    }

    function updateSelectedSeatInfo() {
        let infoText = selectedSeats.length > 0
            ? selectedSeats.map(seat => `${seat.seatRow}排 ${seat.seatNumber}號`).join('; ')
            : 'No seats selected';
        document.getElementById('selectedSeatInfo').textContent = infoText;
    }

    function updateQuantityButtonText() {
        const remainingSeats = requiredSeats - selectedSeats.length;
        const buttonText = remainingSeats === 0
            ? '確認您的訂單'
            : `還有 ${remainingSeats}個座位待選取`;
        quantityButton.textContent = buttonText;

        if (remainingSeats === 0) {
            quantityButton.classList.remove('btn-primary');
            quantityButton.classList.add('btn-success');
        } else {
            quantityButton.classList.remove('btn-success');
            quantityButton.classList.add('btn-primary');
        }

        quantityButton.disabled = remainingSeats !== 0;
    }

    function showNotification(message) {
        document.getElementById('notificationMessage').textContent = message;
        new bootstrap.Modal(document.getElementById('notificationDialog')).show();
    }

    function confirmSelection() {
        Swal.fire({
            title: '確認您的選擇',
            text: `您已選擇了 ${selectedSeats.length} 個座位。按確定繼續支付。`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '確定',
            cancelButtonText: '取消'
        }).then((result) => {
            if (result.isConfirmed) {
                // Set isConfirming to true to prevent the onbeforeunload warning
                isConfirming = true;
                // Implement your payment logic here
                console.log('Proceeding to payment with seats:', selectedSeats);

                // Create a form to submit the data
                let form = document.createElement('form');
                form.method = 'POST';
                form.action = 'ConfirmSelection'; // Adjust this to your actual route

                // Add selected seats
                selectedSeats.forEach((seat, index) => {
                    let seatIdInput = document.createElement('input');
                    seatIdInput.type = 'hidden';
                    seatIdInput.name = `SelectedSeats[${index}].SeatID`;
                    seatIdInput.value = seat.SeatID;
                    form.appendChild(seatIdInput);

                    let seatRowInput = document.createElement('input');
                    seatRowInput.type = 'hidden';
                    seatRowInput.name = `SelectedSeats[${index}].SeatRow`;
                    seatRowInput.value = seat.seatRow;
                    form.appendChild(seatRowInput);

                    let seatNumberInput = document.createElement('input');
                    seatNumberInput.type = 'hidden';
                    seatNumberInput.name = `SelectedSeats[${index}].SeatNumber`;
                    seatNumberInput.value = seat.seatNumber;
                    form.appendChild(seatNumberInput);
                });

                // Add other necessary data
                let movieNameInput = document.createElement('input');
                movieNameInput.type = 'hidden';
                movieNameInput.name = 'MovieName';
                movieNameInput.value = decodeURIComponent('@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.MovieName))');
                form.appendChild(movieNameInput);

                let movieEnglishNameInput = document.createElement('input');
                movieEnglishNameInput.type = 'hidden';
                movieEnglishNameInput.name = 'MovieEnglishName';
                movieEnglishNameInput.value = '@Model.MovieEnglishName';
                form.appendChild(movieEnglishNameInput);

                let movieTotalPrice = document.createElement('input');
                movieTotalPrice.type = 'hidden';
                movieTotalPrice.name = 'MovieTotalPrice';
                movieTotalPrice.value = '@Model.BookingSelection.TotalPrice';
                form.appendChild(movieTotalPrice);

                let movieImg = document.createElement('input');
                movieImg.type = 'hidden';
                movieImg.name = 'MovieImg';
                movieImg.value = '@Model.MovieImag';
                form.appendChild(movieImg);

                let levelInput = document.createElement('input');
                levelInput.type = 'hidden';
                levelInput.name = 'Level';
                levelInput.value = '@Model.Level';
                form.appendChild(levelInput);

                let showDateTimeInput = document.createElement('input');
                showDateTimeInput.type = 'hidden';
                showDateTimeInput.name = 'ShowDateTime';
                showDateTimeInput.value = '@Model.ShowDateTime.ToString("yyyy-MM-ddTHH:mm:ss")';
                form.appendChild(showDateTimeInput);

                let auditoriumNameInput = document.createElement('input');
                auditoriumNameInput.type = 'hidden';
                auditoriumNameInput.name = 'AuditoriumName';
                auditoriumNameInput.value = decodeURIComponent('@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.AuditoriumName))');
                form.appendChild(auditoriumNameInput);

                let auditoriumIdInput = document.createElement('input');
                auditoriumIdInput.type = 'hidden';
                auditoriumIdInput.name = 'AuditoriumId';
                auditoriumIdInput.value = '@Model.BookingSelection.Auditoriumid';
                form.appendChild(auditoriumIdInput);

                let showIdInput = document.createElement('input');
                showIdInput.type = 'hidden';
                showIdInput.name = 'ShowId';
                showIdInput.value = '@Model.BookingSelection.ShowId';
                form.appendChild(showIdInput);

                let selectedTicketTypeIdInput = document.createElement('input');
                selectedTicketTypeIdInput.type = 'hidden';
                selectedTicketTypeIdInput.name = 'SelectedTicketTypeId';
                selectedTicketTypeIdInput.value = '@Model.BookingSelection.SelectedTicketTypeId';
                form.appendChild(selectedTicketTypeIdInput);

                // Add snack data
                let selectedSnacks = @Html.Raw(Json.Serialize(Model.SelectedSnacks));
                selectedSnacks.forEach((snack, index) => {
                    Object.keys(snack).forEach(key => {
                        let input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = `SelectedSnacks[${index}].${key}`;
                        input.value = snack[key];
                        form.appendChild(input);
                    });
                });

                // Add ticket data
                let selectedTickets = @Html.Raw(Json.Serialize(Model.TicketTypes));
                selectedTickets.forEach((ticket, index) => {
                    Object.keys(ticket).forEach(key => {
                        let input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = `SelectedTickets[${index}].${key}`;
                        input.value = ticket[key];
                        form.appendChild(input);
                    });
                });

                // Submit the form
                document.body.appendChild(form);
                form.submit();
            }
        });
    }


    document.addEventListener('DOMContentLoaded', function () {
        quantityButton.addEventListener('click', confirmSelection);
        enableConfirmButton();
        updateQuantityButtonText();
    });

    // Time left calculation
    var showTime = new Date('@Model.ShowDateTime.ToString("yyyy-MM-ddTHH:mm:ss")');
    function updateTimeLeft() {
        var now = new Date();
        var distance = showTime - now;
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var timeLeftDisplay = "";
        if (days > 0) {
            timeLeftDisplay = days + " 天後";
        } else if (hours > 0) {
            timeLeftDisplay = hours + "小時 " + minutes + "分";
        } else if (minutes > 0) {
            timeLeftDisplay = minutes + "分";
        } else {
            timeLeftDisplay = "即將開演";
        }
        document.getElementById("timeLeft").textContent = "(" + timeLeftDisplay + ")";
    }
    // Update the time left every second
    setInterval(updateTimeLeft, 1000);
    updateTimeLeft();
</script>

<script>
    (function (global) {
        if (typeof (global) === "undefined") {
            throw new Error("window is undefined");
        }

        var _hash = "!";
        var noBackPlease = function () {
            if (global.location.hash !== _hash) {
                global.location.hash = _hash;
            }
        };

        global.onhashchange = function () {
            if (global.location.hash !== _hash) {
                global.location.hash = _hash;
            }
        };

        global.onload = function () {
            noBackPlease();
            setInterval(noBackPlease, 50);

            // Disables backspace on page except on input fields and textarea
            document.body.onkeydown = function (e) {
                var elm = e.target.nodeName.toLowerCase();
                if (e.which === 8 && (elm !== 'input' && elm !== 'textarea')) {
                    e.preventDefault();
                }
                e.stopPropagation();
            };
        };
    })(window);

    let isConfirming = false;

    window.onbeforeunload = function (e) {
        if (!isConfirming) {
            return "您確定要離開此頁面嗎？您的座位選擇將會遺失。";
        }
    }

    // Custom back button function
    function goBackToIndex() {
        Swal.fire({
            title: '警告',
            html: '<div class="custom-swal-text">要離開此頁面嗎？<br>您的先前的選擇將會遺失!</div>',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '確定',
            cancelButtonText: '放棄'
        }).then((result) => {
            if (result.isConfirmed) {
                // Remove any onbeforeunload handler before navigating
                window.onbeforeunload = null;
                // Navigate to the index page
                window.location.href = '/Booking/ChooseTheaterAuditorium';
            }
        });
    }
</script>
