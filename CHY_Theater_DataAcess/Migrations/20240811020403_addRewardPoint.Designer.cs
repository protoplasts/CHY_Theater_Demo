// <auto-generated />
using System;
using CHY_Theater_DataAcess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CHY_Theater_DataAcess.Migrations
{
    [DbContext(typeof(Theater_ProjectDbContext))]
    [Migration("20240811020403_addRewardPoint")]
    partial class addRewardPoint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CHY_Theater_Models.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActorId")
                        .HasName("PK__Actors__57B3EA4B0E626426");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Auditorium", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditoriumId"));

                    b.Property<string>("AuditoriumName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuditoriumType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TheaterId")
                        .HasColumnType("int")
                        .HasColumnName("Theater_Id");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("AuditoriumId")
                        .HasName("PK__Auditori__6E91B185D6E4C686");

                    b.HasIndex("TheaterId");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BookingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("MerchantTradeNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShowingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AED2C97DB6B");

                    b.HasIndex("ShowingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingCoupon", b =>
                {
                    b.Property<int>("BookingCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingCouponID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingCouponId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.HasKey("BookingCouponId")
                        .HasName("PK__BookingC__7A33E467D849637D");

                    b.HasIndex("BookingId");

                    b.HasIndex("CouponId");

                    b.ToTable("BookingCoupons");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingSeatsDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_Id");

                    b.Property<int?>("ShowSeatId")
                        .HasColumnType("int")
                        .HasColumnName("ShowSeat_Id");

                    b.HasKey("DetailId")
                        .HasName("PK__BookingS__135C316D59B40F00");

                    b.HasIndex("BookingId");

                    b.HasIndex("ShowSeatId");

                    b.ToTable("BookingSeats_Detail", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingSnack", b =>
                {
                    b.Property<int>("BookingSnackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingSnackId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SnackId")
                        .HasColumnType("int");

                    b.HasKey("BookingSnackId")
                        .HasName("PK__BookingS__BE71E92CE04B6DF6");

                    b.HasIndex("BookingId");

                    b.HasIndex("SnackId");

                    b.ToTable("BookingSnacks");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingTicketTypesDetail", b =>
                {
                    b.Property<int>("TicketTypesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypesDetailId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("TicketTypesDetailId")
                        .HasName("PK__BookingT__1CDBC808754071BE");

                    b.HasIndex("BookingId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("BookingTicketTypes_Detail", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.CarouselItem", b =>
                {
                    b.Property<int>("CarouselItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarouselItemId"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CarouselItemId");

                    b.HasIndex("MovieId");

                    b.ToTable("CarouselItems");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassId")
                        .HasName("PK__Classes__CB1927C01BC8ED5A");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Comment", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentsId"));

                    b.Property<string>("CommentMessage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CommentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("CommentsId")
                        .HasName("PK__Comments__9487C7CC0E8FED1E");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ContactStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("ContactId")
                        .HasName("PK__Contacts__5C66259BADB5D91E");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CurrentUsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaxUsageCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupons__384AF1DAC55A378D");

                    b.HasIndex(new[] { "CouponCode" }, "UQ__Coupons__D349080072329089")
                        .IsUnique();

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.EcpayOrder", b =>
                {
                    b.Property<int>("EcpayOrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EcpayOrdersID"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MerchantTradeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentTypeChargeFee")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RtnCode")
                        .HasColumnType("int");

                    b.Property<string>("RtnMsg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SimulatePaid")
                        .HasColumnType("int");

                    b.Property<int?>("TradeAmt")
                        .HasColumnType("int");

                    b.Property<string>("TradeDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EcpayOrdersID");

                    b.HasIndex("BookingId");

                    b.ToTable("EcpayOrders");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Habbit", b =>
                {
                    b.Property<int>("HabbitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabbitId"));

                    b.Property<string>("Habbit1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Habbit");

                    b.HasKey("HabbitId")
                        .HasName("PK__Habbits__37878EF4057BE2B2");

                    b.ToTable("Habbits");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MovieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieEnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MovieImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MovieState")
                        .HasColumnType("int");

                    b.Property<string>("Movievideo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("OnFous")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.HasKey("MovieId")
                        .HasName("PK__Movies__4BD2941A0C4DBD58");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("Actor_Id");

                    b.Property<int>("MainLevel")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId")
                        .HasName("PK__Movie_Ac__B4DF441D60805C80");

                    b.HasIndex("ActorId");

                    b.ToTable("Movie_Actor", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.MovieClass", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("Class_Id");

                    b.Property<int?>("Other")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ClassId")
                        .HasName("PK__Movie_Cl__11817476F019CDDE");

                    b.HasIndex("ClassId");

                    b.ToTable("Movie_Class", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MerchantTradeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentTypeChargeFee")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("RtnCode")
                        .HasColumnType("int");

                    b.Property<string>("RtnMsg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SimulatePaid")
                        .HasColumnType("int");

                    b.Property<int?>("TradeAmt")
                        .HasColumnType("int");

                    b.Property<string>("TradeDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradeNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId")
                        .HasName("PK__PaymentT__55433A6BB7EEDB04");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Rating", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("Rating1")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.HasKey("MovieId", "UserId")
                        .HasName("PK__Rating__688EDD32FBA3EE38");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.RewardPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EarnedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("RewardPoint");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("Auditorium_Id");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SeatStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SeatId")
                        .HasName("PK__Seats__311713F380106F28");

                    b.HasIndex("AuditoriumId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Show", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("Auditorium_Id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<DateTime>("ShowDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("ShowId")
                        .HasName("PK__Shows__6DE3E0B2D6FADC45");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("MovieId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.ShowSeat", b =>
                {
                    b.Property<int>("ShowSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowSeatId"));

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("Seat_Id");

                    b.Property<int?>("ShowId")
                        .HasColumnType("int")
                        .HasColumnName("Show_Id");

                    b.Property<string>("ShowSeatStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Available");

                    b.HasKey("ShowSeatId")
                        .HasName("PK__ShowSeat__9536FC93DE684D92");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowId");

                    b.ToTable("ShowSeats");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Snack", b =>
                {
                    b.Property<int>("SnackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnackId"));

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SnackImages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnackName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SnackSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SnackId")
                        .HasName("PK__Snacks__320A85CBE113394B");

                    b.ToTable("Snacks");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Theater", b =>
                {
                    b.Property<int>("TheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheaterId"));

                    b.Property<string>("TheaterDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TheaterEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("TheaterEndTime")
                        .HasColumnType("time");

                    b.Property<string>("TheaterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheaterLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TheaterName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TheaterPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<TimeOnly>("TheaterStartTime")
                        .HasColumnType("time");

                    b.HasKey("TheaterId")
                        .HasName("PK__Theaters__4D68B2191C691A37");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"));

                    b.Property<int>("HowManySeatForType")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketTypeId")
                        .HasName("PK__TicketTy__6CD68431CF23329C");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Twin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("InviteeId")
                        .HasColumnType("int")
                        .HasColumnName("Invitee_Id");

                    b.Property<int>("ShowId")
                        .HasColumnType("int")
                        .HasColumnName("Show_Id");

                    b.Property<int>("TwinupState")
                        .HasColumnType("int");

                    b.HasKey("UserId", "InviteeId", "ShowId")
                        .HasName("PK__Twins__F63A532D71BFCBA4");

                    b.HasIndex("InviteeId");

                    b.HasIndex("ShowId");

                    b.ToTable("Twins");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("EmailConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Mbti")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("MBTI");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CDD41E9DF");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053424887393")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.UserHabbit", b =>
                {
                    b.Property<int>("HabbitId")
                        .HasColumnType("int")
                        .HasColumnName("Habbit_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int?>("Other")
                        .HasColumnType("int");

                    b.HasKey("HabbitId", "UserId")
                        .HasName("PK__User_Hab__0DE6E2D85C36AF4C");

                    b.HasIndex("UserId");

                    b.ToTable("User_Habbit", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.UserPassword", b =>
                {
                    b.Property<int>("UserPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPasswordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPasswordId")
                        .HasName("PK__UserPass__FD2F7D5F56B60D05");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("CHY_Theater_Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("NewsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTicketPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberPoints")
                        .HasColumnType("int");

                    b.Property<string>("MembershipLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Auditorium", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Theater", "Theater")
                        .WithMany("Auditoria")
                        .HasForeignKey("TheaterId")
                        .HasConstraintName("FK__Auditoriu__Theat__5DCAEF64");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Booking", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Show", "Showing")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowingId")
                        .HasConstraintName("FK__Bookings__Showin__797309D9");

                    b.Navigation("Showing");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingCoupon", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany("BookingCoupons")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__BookingCo__Booki__08B54D69");

                    b.HasOne("CHY_Theater_Models.Models.Coupon", "Coupon")
                        .WithMany("BookingCoupons")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK__BookingCo__Coupo__09A971A2");

                    b.Navigation("Booking");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingSeatsDetail", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany("BookingSeatsDetails")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__BookingSe__Booki__01142BA1");

                    b.HasOne("CHY_Theater_Models.Models.ShowSeat", "ShowSeat")
                        .WithMany("BookingSeatsDetails")
                        .HasForeignKey("ShowSeatId")
                        .HasConstraintName("FK__BookingSe__ShowS__02084FDA");

                    b.Navigation("Booking");

                    b.Navigation("ShowSeat");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingSnack", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany("BookingSnacks")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__BookingSn__Booki__04E4BC85");

                    b.HasOne("CHY_Theater_Models.Models.Snack", "Snack")
                        .WithMany("BookingSnacks")
                        .HasForeignKey("SnackId")
                        .HasConstraintName("FK__BookingSn__Snack__05D8E0BE");

                    b.Navigation("Booking");

                    b.Navigation("Snack");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.BookingTicketTypesDetail", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany("BookingTicketTypesDetails")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__BookingTi__Booki__7D439ABD");

                    b.HasOne("CHY_Theater_Models.Models.TicketType", "TicketType")
                        .WithMany("BookingTicketTypesDetails")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK__BookingTi__Ticke__7E37BEF6");

                    b.Navigation("Booking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.CarouselItem", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Comment", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__Movie___5441852A");

                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__User_I__5535A963");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Contact", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Contacts__User_I__10566F31");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.EcpayOrder", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.MovieActor", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Act__Actor__4316F928");

                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Act__Movie__4222D4EF");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.MovieClass", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Class", "Class")
                        .WithMany("MovieClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Cla__Class__3D5E1FD2");

                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany("MovieClasses")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Cla__Movie__3C69FB99");

                    b.Navigation("Class");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.PaymentTransaction", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Booking", "Booking")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__PaymentTr__Booki__0C85DE4D");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Rating", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Rating__Movie_Id__5812160E");

                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Rating__User_Id__59063A47");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.RewardPoint", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.PaymentTransaction", "Transaction")
                        .WithMany("RewardPoints")
                        .HasForeignKey("TransactionId");

                    b.HasOne("CHY_Theater_Models.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Seat", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Auditorium", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .HasConstraintName("FK__Seats__Auditoriu__60A75C0F");

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Show", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Auditorium", "Auditorium")
                        .WithMany("Shows")
                        .HasForeignKey("AuditoriumId")
                        .IsRequired()
                        .HasConstraintName("FK__Shows__Auditoriu__6477ECF3");

                    b.HasOne("CHY_Theater_Models.Models.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Shows__Movie_Id__6383C8BA");

                    b.Navigation("Auditorium");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.ShowSeat", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Seat", "Seat")
                        .WithMany("ShowSeats")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK__ShowSeats__Seat___68487DD7");

                    b.HasOne("CHY_Theater_Models.Models.Show", "Show")
                        .WithMany("ShowSeats")
                        .HasForeignKey("ShowId")
                        .HasConstraintName("FK__ShowSeats__Show___6754599E");

                    b.Navigation("Seat");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Twin", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.User", "Invitee")
                        .WithMany("TwinInvitees")
                        .HasForeignKey("InviteeId")
                        .IsRequired()
                        .HasConstraintName("FK__Twins__Invitee_I__6EF57B66");

                    b.HasOne("CHY_Theater_Models.Models.Show", "Show")
                        .WithMany("Twins")
                        .HasForeignKey("ShowId")
                        .IsRequired()
                        .HasConstraintName("FK__Twins__Show_Id__6D0D32F4");

                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("TwinUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Twins__User_Id__6E01572D");

                    b.Navigation("Invitee");

                    b.Navigation("Show");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.UserHabbit", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.Habbit", "Habbit")
                        .WithMany("UserHabbits")
                        .HasForeignKey("HabbitId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Habb__Habbi__4BAC3F29");

                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("UserHabbits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Habb__User___4CA06362");

                    b.Navigation("Habbit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.UserPassword", b =>
                {
                    b.HasOne("CHY_Theater_Models.Models.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserPassw__UserI__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Auditorium", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Booking", b =>
                {
                    b.Navigation("BookingCoupons");

                    b.Navigation("BookingSeatsDetails");

                    b.Navigation("BookingSnacks");

                    b.Navigation("BookingTicketTypesDetails");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Class", b =>
                {
                    b.Navigation("MovieClasses");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Coupon", b =>
                {
                    b.Navigation("BookingCoupons");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Habbit", b =>
                {
                    b.Navigation("UserHabbits");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MovieActors");

                    b.Navigation("MovieClasses");

                    b.Navigation("Ratings");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.PaymentTransaction", b =>
                {
                    b.Navigation("RewardPoints");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Seat", b =>
                {
                    b.Navigation("ShowSeats");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Show", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ShowSeats");

                    b.Navigation("Twins");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.ShowSeat", b =>
                {
                    b.Navigation("BookingSeatsDetails");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Snack", b =>
                {
                    b.Navigation("BookingSnacks");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.Theater", b =>
                {
                    b.Navigation("Auditoria");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.TicketType", b =>
                {
                    b.Navigation("BookingTicketTypesDetails");
                });

            modelBuilder.Entity("CHY_Theater_Models.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contacts");

                    b.Navigation("Ratings");

                    b.Navigation("TwinInvitees");

                    b.Navigation("TwinUsers");

                    b.Navigation("UserHabbits");

                    b.Navigation("UserPasswords");
                });
#pragma warning restore 612, 618
        }
    }
}
